---
image:
  registry: ghcr.io
  repository: authelia/authelia
annotations: 
  vault.hashicorp.com/tls-skip-verify: 'true'
rbac:
  enabled: true
  serviceAccountName: authelia
domain: k8s.example.com
service:
  type: "ClusterIP"
  port: 80
  nodePort: 30091
ingress:
  enabled: true
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  certManager: true
  rewriteTarget: true
  className: nginx
  subdomain: auth
  tls:
    enabled: true
    secret: auth-k8s-example-com-tls
pod:
  kind: DaemonSet
  replicas: 1
  revisionHistoryLimit: 5
  strategy:
    type: RollingUpdate
  env:
  - name: AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_CERTIFICATE_CHAIN_FILE
    value: /tls-secrets/tls.crt
  - name: AUTHELIA_IDENTITY_PROVIDERS_OIDC_ISSUER_PRIVATE_KEY_FILE
    value: /tls-secrets/tls.key
  - name: TZ
    value: US/Central
  resources:
    limits:
      cpu: "1.00"
      memory: 125Mi
    requests:
      cpu: "0.25"
      memory: 50Mi
  probes:
    method:
      httpGet:
        path: /api/health
        port: http
        scheme: HTTP
  extraVolumeMounts:
    - mountPath: /tls-secrets
      name: tls-secrets
      readOnly: true
  extraVolumes:
    - name: tls-secrets
      secret:
        secretName: auth-k8s-example-com-tls
configMap:
  enabled: true
  key: configuration.yaml
  server:
    port: 9091
    buffers:
      read: 4096
      write: 4096
  theme: dark
  totp:
    disable: false
    issuer: ""
    algorithm: sha1
    digits: 6
    period: 30
    skew: 1
    secret_size: 32
  webauthn:
    disable: false
    timeout: 60s
    display_name: Authelia
    attestation_conveyance_preference: indirect
    user_verification: preferred
  ntp:
    address: "fw1.example.com:123"
    version: 4
    max_desync: 3s
    disable_startup_check: false
    disable_failure: false
  authentication_backend:
    password_reset:
      disable: false
      custom_url: ""
    refresh_interval: 5m
    ldap:
      enabled: true
      implementation: custom
      url: ldaps://ldap.example.com
      timeout: 5s
      start_tls: false
      tls:
        server_name: "ldap.example.com"
        skip_verify: true
        minimum_version: TLS1.2
        maximum_version: TLS1.3
      base_dn: DC=example,DC=com
      username_attribute: ""
      additional_users_dn: OU=Users
      users_filter: "(&({username_attribute}={input})(objectClass=inetOrgPerson))"
      additional_groups_dn: OU=groups
      groups_filter: "(&(uniquemember={dn})(objectclass=groupOfUniqueNames))"
      group_name_attribute: ""
      mail_attribute: ""
      display_name_attribute: ""
      permit_referrals: false
      permit_unauthenticated_bind: false
      permit_feature_detection_failure: false
      user: CN=admin,DC=example,DC=com
  password_policy:
    standard:
      enabled: true
      min_length: 16
      max_length: 0
      require_uppercase: true
      require_lowercase: true
      require_number: true
      require_special: true
    zxcvbn:
      enabled: false
      min_score: 0
  access_control:
    default_policy: deny
    networks:
    - name: k8s_pods 
      networks:
      - 10.244.0.0/16
    - name: local_net
      networks:
      - 10.1.0.0/16
    - name: rocket357
      networks:
      - 10.1.1.0/32
    - name: the_friend
      networks:
      - 10.72.54.0/24
    rules:
    - domain_regex: '(change|wbo)\.k8s\.example\.com'
      policy: bypass
      networks:
      - local_net
      - k8s_pods
    - domain: change.k8s.example.com
      policy: bypass
      networks:
      - rocket357
    - domain: wbo.k8s.example.com
      policy: bypass
      networks:
      - local_net
    - domain: '*.k8s.example.com'
      policy: bypass
      resources:
      - '^/\.well-known/.*'
      methods:
      - GET
      - HEAD
    - domain: '*.example.com'
      policy: bypass
      networks:
      - k8s_pods
      methods:
      - GET
      - HEAD
    - domain: '*.k8s.example.com'
      policy: bypass
      networks:
      - k8s_pods
      methods:
      - GET
      - HEAD
    - domain_regex: '(auth|sso|gotify|komga|status)\.example\.com'
      policy: bypass
    - domain_regex: '(auth|sso|gotify|komga|status)\.k8s\.example\.com'
      policy: bypass
    - domain_regex: '(vault|argocd)\.k8s\.example\.com'
      policy: two_factor
      networks:
      - local_net
    - domain: pla.k8s.example.com
      policy: two_factor
      networks:
      - rocket357
  session:
    name: authelia_session
    same_site: lax
    expiration: 1h
    inactivity: 5m
    remember_me_duration: 1M
    redis:
      enabled: true
      enabledSecret: true
      username: 'default'
      host: redis-master.redis.svc.cluster.local
      port: 6379
      database_index: 0
      maximum_active_connections: 8
      minimum_idle_connections: 0
      tls:
        enabled: false
        server_name: ""
        skip_verify: false
        minimum_version: TLS1.2
        maximum_version: TLS1.3
  regulation:
    max_retries: 6
    find_time: 2m
    ban_time: 5m
  storage:
    postgres:
      enabled: true
      host: authdb.authelia.svc.cluster.local
      port: 5432
      database: authelia
      schema: public
      username: authelia
      timeout: 5s
      tls:
        enabled: true
        server_name: ""
        skip_verify: true
        minimum_version: TLS1.2
        maximum_version: TLS1.3
  notifier:
    disable_startup_check: false
    smtp:
      enabled: true
      enabledSecret: true
      host: mx1.example.com
      port: 587
      timeout: 5s
      username: authelia
      sender: authelia@example.com
      identifier: k8s.example.com
      subject: "[Authelia] {title}"
      startup_check_address: rocket357@example.com
      disable_html_emails: true
      disable_require_tls: false
      disable_starttls: false
      tls:
        server_name: "mx1.example.com"
        skip_verify: false
        minimum_version: TLS1.2
        maximum_version: TLS1.3
  identity_providers:
    oidc:
      enabled: true
      access_token_lifespan: 1h
      authorize_code_lifespan: 1m
      id_token_lifespan: 1h
      refresh_token_lifespan: 90m
      enforce_pkce: public_clients_only
      enable_pkce_plain_challenge: false
      minimum_parameter_entropy: 8
      enable_client_debug_messages: false
      issuer_certificate_chain: ""
      cors:
        endpoints:
          - authorization
          - token
          - revocation
          - introspection
        allowed_origins:
          - https://example.com
          - https://k8s.example.com
        allowed_origins_from_client_redirect_uris: true
      clients:
        - id: vault
          description: HashiCorp Vault
          secret: AREALLYLONGSECRETTHATSHOULDBESUPERHARDTOGUESS
          public: false
          authorization_policy: two_factor
          redirect_uris:
            - https://vault.k8s.example.com/oidc/callback
            - https://vault.k8s.example.com/ui/vault/auth/oidc/oidc/callback
          scopes:
            - openid
            - profile
            - groups
            - email
          userinfo_signing_algorithm: none
secret:
  existingSecret: ""
  mountPath: /secrets
  excludeVolumeAndMounts: false
  jwt:
    key: JWT_TOKEN
    value: ""
    filename: JWT_TOKEN
  ldap:
    key: LDAP_PASSWORD
    value: ""
    filename: LDAP_PASSWORD
  storage:
    key: STORAGE_PASSWORD
    value: ""
    filename: STORAGE_PASSWORD
  storageEncryptionKey:
    key: STORAGE_ENCRYPTION_KEY
    value: ""
    filename: STORAGE_ENCRYPTION_KEY
  session:
    key: SESSION_ENCRYPTION_KEY
    value: ""
    filename: SESSION_ENCRYPTION_KEY
  duo:
    key: DUO_API_KEY
    value: ""
    filename: DUO_API_KEY
  redis:
    key: REDIS_PASSWORD
    value: ""
    filename: REDIS_PASSWORD
  redisSentinel:
    key: REDIS_SENTINEL_PASSWORD
    value: ""
    filename: REDIS_SENTINEL_PASSWORD
  smtp:
    key: SMTP_PASSWORD
    value: ""
    filename: SMTP_PASSWORD
  oidcPrivateKey:
    key: OIDC_PRIVATE_KEY
    value: ""
    filename: OIDC_PRIVATE_KEY
  oidcHMACSecret:
    key: OIDC_HMAC_SECRET
    value: ""
    filename: OIDC_HMAC_SECRET
  vaultInjector:
    enabled: true
    role: authelia
    agent:
      status: update
      configMap: ""
      image: ""
      initFirst: "false"
      command: "sh -c 'kill HUP $(pidof authelia)'"
      runAsSameUser: "true"
    secrets:
      jwt:
        path: authelia/jwt:token
        templateValue: '{{ with secret "authelia/jwt" }}{{ .Data.token }}{{ end }}'
        command: ""
      ldap:
        path: authelia/ldap:password
        templateValue: '{{ with secret "authelia/ldap" }}{{ .Data.password }}{{ end }}'
        command: ""
      storage:
        path: authelia/storage:password
        templateValue: '{{ with secret "authelia/storage" }}{{ .Data.password }}{{ end }}'
        command: ""
      storageEncryptionKey:
        path: authelia/storage:encryption_key
        templateValue: '{{ with secret "authelia/storage" }}{{ .Data.encryption_key }}{{ end }}'
        command: ""
      session:
        path: authelia/session:encryption_key
        templateValue: '{{ with secret "authelia/session" }}{{ .Data.encryption_key }}{{ end }}'
        command: ""
      redis:
        path: authelia/redis:password
        templateValue: '{{ with secret "authelia/redis" }}{{ .Data.password }}{{ end }}'
        command: ""
      smtp:
        path: authelia/smtp:password
        templateValue: '{{ with secret "authelia/smtp" }}{{ .Data.password }}{{ end }}'
        command: ""
      oidcPrivateKey:
        path: authelia/oidc:private_key
        templateValue: '{{ with secret "authelia/oidc" }}{{ .Data.issuer_private_key }}{{ end }}'
        command: ""
      oidcHMACSecret:
        path: authelia/oidc:hmac_secret
        templateValue: '{{ with secret "authelia/oidc" }}{{ .Data.hmac_secret }}{{ end }}'
        command: ""